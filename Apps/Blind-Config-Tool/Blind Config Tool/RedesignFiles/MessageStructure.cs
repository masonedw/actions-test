using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Blind_Config_Tool.RedesignFiles
{
    public class MessageStructure
    {
        public const int staticBytes = 12;  //The bytes that will always be in a message that are not part of the data portion (cmd, length, node, addresses, checksum)
        public byte[] RawData { get; set; }
        public byte[] Command { get; set; }
        public byte[] Length { get; set; }
        public byte[] NodeID { get; set; }
        public byte[] Sender { get; set; }
        public byte[] Receiver { get; set; }
        public byte[] Data { get; set; }
        public byte[] Checksum { get; set; }

        public MessageStructure(byte[] msg) //Used for messages retrieved by devices
        {
            RawData = msg;
            Command = new byte[1] { msg[0] };
            Length = new byte[1] { msg[1] };
            NodeID = new byte[2] { msg[2], msg[3] };
            Sender = new byte[3] { msg[4], msg[5], msg[6] };
            Receiver = new byte[3] { msg[7], msg[8], msg[9] };

            if (Length[0] > RawData.Length)
            {
                return;
            }

            Data = new byte[Length[0] - staticBytes];
            Array.Copy(msg, 10, Data, 0, Length[0] - staticBytes);
            Checksum = new byte[2];
        }

        public MessageStructure(byte[] cmd, byte[] len, byte[] data) //Used for messages generated by the app (things like the sender and receiver will be populated by the build function)
        {
            Command = cmd; 
            Length = len;
            NodeID = new byte[2];
            Sender = new byte[3];
            Receiver = new byte[3];
            Data = data;
            RawData = new byte[0];
            Checksum = new byte[2];
        }

        public MessageStructure(MessageStructure original)
        {
            // Deep copy byte arrays for reference types
            Command = original.Command != null ? (byte[])original.Command.Clone() : null;
            Length = original.Length != null ? (byte[])original.Length.Clone() : null;
            Sender = original.Sender != null ? (byte[])original.Sender.Clone() : null;
            Receiver = original.Receiver != null ? (byte[])original.Receiver.Clone() : null;
            Data = original.Data != null ? (byte[])original.Data.Clone() : null;
            RawData = original.RawData != null ? (byte[])original.RawData.Clone() : null;

            // Direct copy for primitive types (value types)
            Checksum = original.Checksum;
            NodeID = original.NodeID;
        }
    }
}
